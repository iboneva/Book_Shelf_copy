(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'Book_Shelf_Itmes'"
p3
sS'layer'
p4
S'/Users/ianaboneva/Dropbox/DePaul/CSC 438 - Web Applications/web2py/applications/Book_Shelf_copy/models/db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL('sqlite://storage.sqlite')\nelse:\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\n    db = DAL('google:datastore')\n    ## store sessions and tickets there\n    session.connect(request, response, db = db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db, hmac_key=Auth.get_or_create_key())\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables()\n\n## configure email\nmail=auth.settings.mailer\nmail.settings.server = 'logging' or 'smtp.gmail.com:587'\nmail.settings.sender = 'you@gmail.com'\nmail.settings.login = 'username:password'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nuse_janrain(auth,filename='private/janrain.key')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\ndb.define_table('Book_Profile',\n    Field('Title'),\n    Field('Author'),\n    Field('Genre'),\n    Field('Publisher'),\n    Field('Publisher_Date'),\n    Field('Link_to_Buy'),\n    auth.signature)\n\ndb.define_table('User_Profile',\n    Field('Name', requires=IS_NOT_EMPTY()),\n    Field('Favorite_Book'),\n    Field('Bio', 'text'),\n    auth.signature)    \n\ndb.define_table('Book_Shelf',\n    Field('Shelf_Name'),\n    Field('User_Profile_id', db.User_Profile),\n    auth.signature)   \n    \ndb.define_table('Book_Shelf_Items',\n    Field('Book_Shelf_id', db.Book_Shelf),\n    Field('Book_Profile_id', db.Book_Profile),\n    auth.signature)\n    \ndb.define_table('Comments',\n    Field('Book_Profile_id', db.Book_Profile),\n    Field('Body', 'text'),\n    auth.signature)\n    \ndb.define_table('Reviews',\n    Field('Book_Profile_id', db.Book_Profile),\n    Field('Body', 'text'),\n    auth.signature)\n   \ndb.Book_Profile.is_active.readable = db.Book_Profile.is_active.writable = False   \n   \ndb.User_Profile.Name.requires = IS_NOT_IN_DB(db, 'User_Profile.Name')\ndb.User_Profile.is_active.readable = db.User_Profile.is_active.writable = False\n\ndb.Book_Shelf.is_active.readable = db.Book_Shelf.is_active.writable = False\n# db.Book_Shelf.User_Profile_id.readable = db.Book_Shelf.User_Profile_id.writable = False\n\ndb.Book_Shelf_Itmes.is_active.readable = db.Book_Shelf_Items.is_active.writable = False\n    \ndb.Comments.Book_Profile_id.requires = IS_IN_DB(db, db.Book_Profile.id, '%(Title)s')\n#'Comments.Book_Profile_id')\ndb.Comments.Body.requires = IS_NOT_EMPTY()\ndb.Comments.created_by.readable = db.Comments.created_by.writable = False\ndb.Comments.created_on.readable = db.Comments.created_on.writable = False\n\ndb.Comments.Book_Profile_id.readable = db.Comments.Book_Profile_id.writable = False\n\n\ndb.Reviews.Book_Profile_id.requires = IS_IN_DB(db, db.Book_Profile.id, '%(Title)s')\n#'Reviews.Book_Profile_id')\ndb.Reviews.Body.requires = IS_NOT_EMPTY()\ndb.Reviews.created_by.readable = db.Reviews.created_by.writable = False\ndb.Reviews.created_on.readable = db.Reviews.created_on.writable = False\n\ndb.Reviews.Book_Profile_id.readable = db.Reviews.Book_Profile_id.writable = False\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/ianaboneva/Dropbox/DePaul/CSC 438 - Web Applications/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/Users/ianaboneva/Dropbox/DePaul/CSC 438 - Web Applications/web2py/applications/Book_Shelf_copy/models/db.py", line 125, in <module>\n    db.Book_Shelf_Itmes.is_active.readable = db.Book_Shelf_Items.is_active.writable = False\n  File "/Users/ianaboneva/Dropbox/DePaul/CSC 438 - Web Applications/web2py/gluon/dal.py", line 6343, in __getattr__\n    return self[key]\n  File "/Users/ianaboneva/Dropbox/DePaul/CSC 438 - Web Applications/web2py/gluon/dal.py", line 6337, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'Book_Shelf_Itmes\'\n'
p11
s.